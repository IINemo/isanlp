# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import annotation_pb2 as annotation__pb2


class NlpServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.process = channel.unary_unary(
        '/NlpService/process',
        request_serializer=annotation__pb2.ProcessRequest.SerializeToString,
        response_deserializer=annotation__pb2.ProcessReply.FromString,
        )
    self.get_registered_pipelines = channel.unary_unary(
        '/NlpService/get_registered_pipelines',
        request_serializer=annotation__pb2.Void.SerializeToString,
        response_deserializer=annotation__pb2.RegisteredPipelinesReply.FromString,
        )


class NlpServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def process(self, request, context):
    """Process data in a pipeline.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_registered_pipelines(self, request, context):
    """Get registered pipelines.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_NlpServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'process': grpc.unary_unary_rpc_method_handler(
          servicer.process,
          request_deserializer=annotation__pb2.ProcessRequest.FromString,
          response_serializer=annotation__pb2.ProcessReply.SerializeToString,
      ),
      'get_registered_pipelines': grpc.unary_unary_rpc_method_handler(
          servicer.get_registered_pipelines,
          request_deserializer=annotation__pb2.Void.FromString,
          response_serializer=annotation__pb2.RegisteredPipelinesReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'NlpService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
